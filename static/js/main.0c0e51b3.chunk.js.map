{"version":3,"sources":["serviceWorker.js","robots.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","CardList","robots","cardMapper","map","element","i","Error","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","error_info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","FilteredRobots","filter","name","toLowerCase","includes","length","backgroundColor","display","padding","href","ReactDOM","render","align","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBC,I,4BCsBQC,EAnBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEPC,EAAWD,EAAOE,KAAI,SAACC,EAAQC,GAG7B,MAAM,IAAIC,MAAM,aAOxB,OACI,6BACCJ,ICJMK,EAVC,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC3B,OAEI,6BACI,2BAAOC,KAAK,SAASC,YAAY,mBAAmBC,SAAUH,MCc3DI,G,MAZF,SAACC,GAGV,OACI,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAmBC,OAAO,UAC3DJ,EAAMK,YCeJC,E,kDAzBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAM,CACPC,UAAS,GAHC,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SAEH,8FAGAG,KAAKX,MAAMK,a,GAnBFQ,aCmFbC,E,kDApEX,aAAc,IAAD,8BACT,gBA0DJC,eAAe,SAACC,GACZ,EAAKJ,SAAS,CAAClB,YAAYsB,EAAMC,OAAOC,SA1DxC,EAAKX,MAAM,CACPpB,OAAQ,GACRO,YAAY,IAJP,E,gEASO,IAAD,OAKfyB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GACF,EAAKX,SAAS,CAACzB,OAAOoC,S,+BAMrB,IAAD,OACEC,EAAeb,KAAKJ,MAAMpB,OAAOsC,QAAO,SAAAtC,GAE1C,OAAOA,EAAOuC,KAAKC,cAAcC,SAAS,EAAKrB,MAAMb,YAAYiC,kBAKrE,OAA8B,IAA3BhB,KAAKJ,MAAMpB,OAAO0C,OACV,uCAIH,6BACA,2CACA,wBAAI5B,MAAO,CAAC6B,gBAAgB,qBAC5B,wBAAI7B,MAAO,CAAC8B,QAAQ,eAAeC,QAAQ,SAAS,uBAAGC,KAAK,SAAR,SACpD,wBAAIhC,MAAO,CAAC8B,QAAQ,eAAeC,QAAQ,SAAS,uBAAGC,KAAK,YAAR,YACpD,wBAAIhC,MAAO,CAAC8B,QAAU,eAAeC,QAAQ,SAAU,uBAAGC,KAAK,aAAR,cAGvD,kBAAC,EAAD,CAAWtC,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU5B,OAAQqC,W,GAjDpBX,a,MCLlBqB,IAASC,OACP,yBAAKC,MAAM,UACX,kBAAC,EAAD,OAEAC,SAASC,eAAe,SPqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.0c0e51b3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];\r\n  ","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n\r\n    const cardMapper=robots.map((element,i)=>{\r\n        //Unique key needs to be given to optimize ReactDom manipulation\r\n        if(true){\r\n            throw new Error('NOOOOO');\r\n        }\r\n        return (<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>);\r\n        //return (<Card id={element.id} name={element.name} email={element.email}/>);\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n        {cardMapper}\r\n        </div>\r\n    );\r\n    \r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox=({searchfield, searchChange})=>{\r\n    return(\r\n\r\n        <div>\r\n            <input type=\"search\" placeholder=\"Enter Robot Name\" onChange={searchChange}/>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n//Scroll is not a self scrolling compoent but a container tag/element\r\n/*\r\n<Scroll>\r\n    <App robots={robots}/>\r\n</Scroll>\r\n*/\r\n\r\nconst Scroll=(props)=>{//props is the children object\r\n    //use props.children\r\n\r\n    return(\r\n        <div style={{overflow:\"scroll\",border:\"1px solid black\", height:\"700px\"}}>\r\n            {props.children}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error, error_info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            //Display fallback UI\r\n            return(<h1>Sorry, Some Error has occured while processing child component</h1>);\r\n        }\r\n        else{\r\n            return this.props.children;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport {robots}  from '../robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll'; \r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n//props are things that come out of state\r\n\r\n//State is superior to props as props depend on state\r\n\r\n\r\n\r\n//States require classes to extend Compent\r\n//the line \"const App=()=>{}\" is replaced by \"class App extends Component\"\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={//States in react make them smart components\r\n            robots: [],\r\n            searchfield:''//Default search field =''\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n\r\n        //Once mounted set the state's robot var to robots\r\n\r\n        //window.fetch a function to make requests to urls\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>{\r\n            this.setState({robots:users})\r\n        });\r\n        \r\n        //Interaction with backend\r\n    }\r\n\r\n    render(){\r\n        const FilteredRobots=this.state.robots.filter(robots=>{\r\n            \r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\r\n        });\r\n       // console.log(FilteredRobots);\r\n        \r\n        if(this.state.robots.length===0){//Display a loading bar\r\n            return <h1>Loading</h1>\r\n        }\r\n        else{\r\n            return(\r\n                <div>\r\n                <h1>ROBOFRIENDS</h1> \r\n                <ul style={{backgroundColor:\"rgb(244,233,233)\"}}>\r\n                <li style={{display:\"inline-block\",padding:\"20px\"}}><a href=\"#home\">Home</a></li>\r\n                <li style={{display:\"inline-block\",padding:\"20px\"}}><a href=\"#careers\">Careers</a></li>\r\n                <li style={{display : \"inline-block\",padding:\"20px\"}} ><a href=\"#about-us\">About Us</a></li>\r\n                </ul>\r\n        \r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                    <CardList robots={FilteredRobots}/>\r\n                    </ErrorBoundary>\r\n                \r\n                </Scroll>\r\n                </div>\r\n                );\r\n        }\r\n        \r\n\r\n    }\r\n\r\n\r\n    onSearchChange=(event)=>{ \r\n        this.setState({searchfield:event.target.value});\r\n        //Always use setState({key:}) instead of this.state.key=...;\r\n        //event.target.value gives the value contained in the target of the event occurring\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport  {robots}  from './robots';\nimport App from './containers/App';\nimport 'tachyons';\n\n//import registerServiceWorker from './registerServiceWorker';\nReactDOM.render(\n  <div align=\"center\">\n  <App/>  \n  </div> ,\n  document.getElementById('root')\n);\n//registerServiceWorker();\nserviceWorker.unregister();\n"],"sourceRoot":""}